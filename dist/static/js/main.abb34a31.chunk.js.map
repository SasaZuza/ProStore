{"version":3,"sources":["components/layout/SingedInLinks.js","store/actions/authActions.js","components/layout/SingedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/projects/ProjectSummary.js","components/projects/ProjectList.js","components/dashboard/Dashboard.js","components/projects/ProjectDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","config/fbConfig.js","components/projects/CreateProject.js","store/actions/projectActions.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","index.js"],"names":["connect","dispatch","signOut","getState","_ref2","getFirebase","auth","then","type","props","react_default","a","createElement","className","NavLink","to","onClick","profile","initials","SignedOutLinks","state","console","log","firebase","links","uid","SingedInLinks","SingedOutLinks","Link","Notifications","notifications","map","item","key","id","user","content","moment","time","toDate","fromNow","ProjectSummary","_ref","project","title","authorFirstName","authorLastName","createdAt","calendar","ProjectList","projects","projects_ProjectSummary","Dashboard","_this$props","this","projects_ProjectList","dashboard_Notifications","Redirect","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","src","imageURL","SignIn","email","password","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSumbit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstName","lastName","signUp","newUser","_ref3","getFirestore","createUserWithEmailAndPassword","resp","doc","set","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","settings","timestampsInSnapshots","CreateProject","image","createProject","history","push","handleUploadSuccess","filename","storage","ref","child","getDownloadURL","url","lib_default","accept","name","storageRef","onUploadSuccess","authorId","add","objectSpread","Date","App","BrowserRouter","layout_Navbar","Switch","Route","exact","path","component","ProjectDetails","Boolean","window","location","hostname","initState","authReducer","arguments","length","undefined","action","message","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","firebaseAuthIsReady","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.abb34a31.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { signOut } from '../../store/actions/authActions'\r\n\r\nconst SignedInLinks = (props) => {\r\n    \r\n    return (\r\n        <ul className=\"right\">\r\n            <li> <NavLink to='/create'> NEW PROJECT </NavLink> </li>\r\n\r\n            {/* When someone clicks the log out it will call function for signing out */}\r\n            <li> <a onClick={props.signOut}> LOG OUT </a> </li>\r\n\r\n            <li> <NavLink to='/' className='btn btn-floating red lighten-1'> \r\n                {props.profile.initials}\r\n            </NavLink> </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\n// Making connection to 'authReducer.js' to dispatch signout option \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signOut: () => dispatch(signOut())\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps) (SignedInLinks)","\r\nexport const signIn = (credentials) => {\r\n\r\n    // getFirebase will make connection when signing in to Firestore\r\n    return (dispatch, getState, { getFirebase }) => {\r\n\r\n        // Const that will make connection to firebase when signing in\r\n        const firebase = getFirebase();\r\n\r\n        // Enrering firebase email and password will connect also user to this app like that\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password\r\n        ).then( () => {\r\n            dispatch({ type: 'LOGIN_SUCCES' });\r\n        }).catch( (err) => {\r\n            dispatch({ type: 'LOGIN_ERROR', err });\r\n        });\r\n        // After entering email and password it will create call to firebase and make login or output an error \r\n    }\r\n}\r\n\r\n\r\nexport const signOut = () => {\r\n\r\n    // getFirebase will make connection when signing out from Firestore\r\n    return (dispatch, getState, { getFirebase }) => { \r\n\r\n        // Const that will make connection to firebase when signing out\r\n        const firebase = getFirebase();\r\n\r\n        // Dispatching a action\r\n        firebase.auth().signOut().then( () => {\r\n            dispatch({ type: 'SIGNOUT_SUCCES' });\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const signUp = (newUser) => {\r\n    // getFirebase will make connection when signing up to Firestore\r\n    // It will use that account and create new document to store users info\r\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n\r\n         // Const that will make connection to firebase and firestore when signing up\r\n         const firebase = getFirebase();\r\n         const firestore = getFirestore();\r\n\r\n         //Method that comunicate with firebase and create new user\r\n         firebase.auth().createUserWithEmailAndPassword(\r\n             newUser.email,\r\n             newUser.password\r\n         ).then( (resp) => {\r\n            return firestore.collection('users').doc(resp.user.uid).set({\r\n                firstName: newUser.firstName,\r\n                lastName: newUser.lastName,\r\n                initials: newUser.firstName[0] + newUser.lastName[0]\r\n            })\r\n            // Creates new collection 'users' and get 'id' from user that is created above\r\n            // With set method we store some properties for every user in that new document\r\n         }).then( () => {\r\n            // When we create user and file in database we dispatch this bellow \r\n            dispatch({ type: 'SIGNUP_SUCCESS' })\r\n         }).catch( (err) =>{\r\n            // If error occurs we dispatch this \r\n            dispatch({ type: 'SIGNUP_ERROR', err })\r\n         })\r\n    }\r\n}","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst SignedOutLinks = () => {\r\n    return (\r\n        <ul className=\"right\">\r\n            <li> <NavLink to='/signup'> SIGN UP </NavLink> </li>\r\n            <li> <NavLink to='/signin'> SIGN IN </NavLink> </li>            \r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default SignedOutLinks","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport SignedInLinks from './SingedInLinks'\r\nimport SignedOutLinks from './SingedOutLinks'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Navbar = (props) => {\r\n\r\n    // Destructuring to grab 'auth' from 'mapStateToProp' and assign it to props\r\n    const { auth, profile } = props;\r\n    \r\n    // If user is loged return signed in links if not return signed out links\r\n    const links = auth.uid ? <SignedInLinks profile={profile} /> : <SignedOutLinks/>;\r\n\r\n    return (\r\n        <nav className=\"nav-wraper grey darken-2\">\r\n            <div className=\"container\">\r\n                <Link to='/' className=\"brand-logo left \"> <i className=\"logo-text\">Pro-Store </i> </Link>\r\n                {/* Outputing links const with properies as bellow */}\r\n                {links}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n// Connect navbar to auth properties from firebase\r\nconst mapStateToProps = (state) => { \r\n    console.log(state);   \r\n    return {\r\n        auth: state.firebase.auth,\r\n        profile: state.firebase.profile\r\n    }\r\n}\r\n// profile: state.firebase.profile - make acces to profile information\r\n\r\n\r\nexport default connect(mapStateToProps) (Navbar)","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nconst Notifications = (props) => {\r\n\r\n    // Destructuring to have acces to notifications from 'Dashboard.js'\r\n    const { notifications } = props;\r\n\r\n    return (\r\n        <div className=\"section\">\r\n            <div className=\"card z-depth-0\">\r\n                <div className=\"card-content\">\r\n\r\n                    <span className=\"card-title\">Notifications:</span>\r\n\r\n                    <ul className=\"notifications\">\r\n                        {/* If there is no notification don't display them and if there is display */} \r\n                        {notifications && notifications.map(item => {\r\n                             {/* There will be displayed name of user, content and date for notification*/}\r\n                            return (                               \r\n                                <li key={item.id}>\r\n                                    <span className=\"pink-text\"> {item.user} </span>\r\n                                    <span> {item.content} </span>\r\n                                    <div className=\"grey-text note-date\">\r\n                                        {moment(item.time.toDate()).fromNow()}\r\n                                    </div>\r\n                                    <hr/>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                       \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notifications","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nconst ProjectSummary = ({project}) => {\r\n    return (\r\n        <div className=\"card z-depth-0 project-summary\">\r\n            <div className=\"card-content grey-text text-darken-3\">\r\n                <span className=\"card-title project-title\">- {project.title} -</span>\r\n                <p className= \"author\">Posted By: {project.authorFirstName} {project.authorLastName}</p>\r\n                <p className=\"grey-text time\">{moment(project.createdAt.toDate()).calendar()}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectSummary ","import React from 'react'\r\nimport ProjectSummary from './ProjectSummary'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst ProjectList = ({projects}) => {\r\n    return (\r\n        <div className=\"project-list section\">\r\n\r\n            {/* If we have projects do .map if not don't do .map */}\r\n           {projects && projects.map(project => {\r\n               return(\r\n                   <Link to={'/project/' + project.id} key={project.id}>\r\n                   <ProjectSummary project={project} />\r\n                   </Link>\r\n               )\r\n           })}\r\n           {/* Adding ProjectSummary component and as prop we add \"project\" and project.id  as a key*/}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectList","import React, { Component } from 'react'\r\nimport Notifications from './Notifications'\r\nimport ProjectList from '../projects/ProjectList'\r\nimport { connect } from 'react-redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\nimport { compose } from 'redux'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nclass Dashboard extends Component {\r\n    render() {\r\n\r\n        // console.log(this.props);\r\n        const { projects, auth, notifications } = this.props;\r\n\r\n        // If user is not loged in redirect to 'signin' page and if it is return code bellow\r\n        if (!auth.uid) return <Redirect to='/signin'/>\r\n        \r\n        return (\r\n            <div className=\"dashboard container\">\r\n                <div className=\"row\">\r\n\r\n                    {/* Lists all projects */}\r\n                    <div className=\"col s12 m7\">\r\n                        <ProjectList projects={projects}/>\r\n                    </div>\r\n\r\n                    {/* Lists all notifications */}\r\n                    <div className=\"col s12 m4 offset-m1\">\r\n                        <Notifications notifications={notifications}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {    \r\n    return {\r\n        projects: state.firestore.ordered.projects, \r\n        auth: state.firebase.auth,\r\n        notifications: state.firestore.ordered.notifications\r\n    }\r\n}\r\n// function that take data from rootReducer and projectReducer\r\n// projects: state.firestore.ordered.projects - takes data from firestore projects database\r\n// auth: state.firebase.auth - takes data from auth reducers\r\n// otifications: state.firestore.ordered.notifications - takes data from notifications collections\r\n\r\n\r\n// Make connection to collections of database - in this case it's projects and notifications\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n      { collection: 'projects', orderBy: ['createdAt','desc'] },\r\n      { collection: 'notifications', limit: 3, orderBy: ['time','desc'] }  // Limiting to show only last 3 notifications \r\n    ])\r\n  )(Dashboard)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\nimport { compose } from 'redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport moment from 'moment'\r\n\r\nfunction ProjectDetails(props) {\r\n    \r\n    // For destructuring save 'project' and 'auth' to const\r\n    const {project, auth} = props;\r\n\r\n    // If user is not loged in redirect to 'signin' page and if it is return code bellow\r\n    if (!auth.uid) return <Redirect to='/signin'/>\r\n\r\n    // If project exists return this data and if not return some string in <p> tag\r\n    if (project) {\r\n        return (\r\n        <div className=\"container section project-details\">\r\n        <div className=\"card z-depth-0\">\r\n            <div className=\"card-content\">\r\n            <img className=\"image-props\" src={ project.imageURL }  />\r\n                <span className=\"card-title\"> {project.title} </span>\r\n                <p>{ project.content }</p>\r\n            </div>\r\n            <div className=\"card-action grey lighten-4 grey-text\">\r\n                <div>Posted by {project.authorFirstName} {project.authorLastName} </div>\r\n                <div>{moment(project.createdAt.toDate()).calendar()}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"container center\">\r\n                <p>Loading project....</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n// Function that is activated with 'connect' option\r\nconst mapStateToProps = (state, ownProps) => {\r\n    \r\n    // We store id of ProjectDetails in this const\r\n    const id = ownProps.match.params.id;\r\n    // Path to the projects in database\r\n    const projects = state.firestore.data.projects;\r\n    // If we have projects return it by project id if not return null\r\n    const project = projects ? projects[id] : null\r\n    \r\n    return {\r\n        project: project,\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n// auth: state.firebase.auth - takes data from auth reducers\r\n\r\n\r\n// Make connection to collection of database\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n        { collection: 'projects' }\r\n    ])\r\n) (ProjectDetails)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { signIn } from '../../store/actions/authActions'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nclass SignIn extends Component {\r\n\r\n    state = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n    \r\n    // Functions for handeling events (onClick and onSubmit)\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    // [e.target.id] - gets the events id (password or email)\r\n    // e.target.value - targets the value that is entered\r\n    \r\n    handleSumbit = (e) => {\r\n        e.preventDefault();\r\n        this.props.signIn(this.state)\r\n    }\r\n    // Outputs what ever is typed as email or password and making connection to Firebase\r\n    // It checks is there account wht that credentials (email & password) \r\n\r\n  render() {\r\n\r\n    // Destructuring to check is there an error at login andd to display it inside return statement bellow and auth\r\n    const { authError, auth } = this.props;\r\n\r\n    // If user is loged in redirect to 'home page' and if it's not return code bellow\r\n    if (auth.uid) return <Redirect to='/'/>\r\n\r\n    return (\r\n\r\n      <div className=\"container\">\r\n\r\n        <form onSubmit={this.handleSumbit} className=\"white\">\r\n            <h5 className=\"grey-text text-darken-3\">SIGN IN</h5>\r\n\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\r\n            </div>\r\n\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n            </div>\r\n\r\n            <div className=\"input-field\">\r\n                <button className=\"btn red lighten-1 z-depth-0\">SIGN IN</button>\r\n                <div className=\"red-text center\">\r\n                    {/* If there is error return it if not return null */}\r\n                    { authError ? <p>{authError}</p> : null }\r\n                </div>\r\n            </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\n// Function that allows to see the outh Error\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        authError: state.auth.authError,\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n// auth: state.firebase.auth - takes data from auth reducers\r\n\r\n// Making connection to 'authActions.js' component to take credentials from it\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signIn: (creds) => dispatch(signIn(creds))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (SignIn)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { signUp } from '../../store/actions/authActions'\r\n\r\nclass SignUp extends Component {\r\n\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        firstName: '',\r\n        lastName: ''\r\n    }\r\n    \r\n    // Functions for handeling events (onClick and onSubmit)\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    // [e.target.id] - gets the events id (password or email)\r\n    // e.target.value - targets the value that is entered\r\n    \r\n    handleSumbit = (e) => {\r\n        e.preventDefault();\r\n        this.props.signUp(this.state)\r\n    }\r\n    // Outputs what ever is typed as email or password\r\n\r\n  render() {\r\n\r\n    // Destructuring to get 'auth' from mapStateToProps\r\n    const { auth, authError } = this.props;\r\n\r\n    // If user is loged in redirect to 'home page' and if it's not return code bellow\r\n    if (auth.uid) return <Redirect to='/'/>\r\n\r\n    return (\r\n\r\n      <div className=\"container\">\r\n\r\n        <form onSubmit={this.handleSumbit} className=\"white\">\r\n            <h5 className=\"grey-text text-darken-3\">SIGN UP</h5>\r\n\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\r\n            </div>\r\n\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n            </div>\r\n\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"firstName\">First Name</label>\r\n                <input type=\"text\" id=\"firstName\" onChange={this.handleChange}/>\r\n            </div>\r\n\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"lastName\">Last Name</label>\r\n                <input type=\"text\" id=\"lastName\" onChange={this.handleChange}/>\r\n            </div>\r\n\r\n            <div className=\"input-field\">\r\n                <button className=\"btn red lighten-1 z-depth-0\">SIGN UP</button>\r\n                <div className=\"red-text center\">\r\n                    { authError ? <p>{ authError }</p> : null }\r\n                </div>\r\n            </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\n\r\n// Function that allows to redirect to home when user is trying to go to this page and he is logedin\r\nconst mapStateToProps = (state) => {\r\n    return {       \r\n        auth: state.firebase.auth,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n// auth: state.firebase.auth - takes data from auth reducers\r\n\r\n\r\n// Function taht connects to 'authActions.js' and take signUp const to create new user to App\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signUp: (newUser) => dispatch(signUp(newUser))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (SignUp)\r\n","import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\n// Initialize Firebase\r\nvar config = {\r\n    apiKey: \"AIzaSyDG-XZmHjZmACfGzBthLPt99A8wekZ4RBQ\",\r\n    authDomain: \"react-redux-firebaseapp.firebaseapp.com\",\r\n    databaseURL: \"https://react-redux-firebaseapp.firebaseio.com\",\r\n    projectId: \"react-redux-firebaseapp\",\r\n    storageBucket: \"react-redux-firebaseapp.appspot.com\",\r\n    messagingSenderId: \"912844551720\"\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n  firebase.firestore().settings({ timestampsInSnapshots: true });\r\n\r\n  export default firebase;","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { createProject } from '../../store/actions/projectActions'\r\nimport {Redirect} from 'react-router-dom'\r\nimport FileUploader from 'react-firebase-file-uploader'\r\nimport firebase from 'firebase'\r\nimport config from '../../config/fbConfig'\r\n\r\n\r\n\r\nclass CreateProject extends Component {\r\n\r\n    state = {\r\n        title: '',\r\n        content: '',\r\n        image: '',\r\n        imageURL: '',        \r\n    }\r\n    \r\n    // Functions for handeling events (onClick and onSubmit):\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    // [e.target.id] - gets the events id (title or content)\r\n    // e.target.value - targets the value that is entered\r\n    \r\n    handleSumbit = (e) => {\r\n        e.preventDefault();        \r\n        this.props.createProject(this.state)\r\n        this.props.history.push('/');\r\n    }\r\n    // Outputs what ever is typed as email or password\r\n    // After submiting new project user is redirected to home page\r\n\r\n    \r\n    // Function that handels the importing image for project:\r\n\r\n    handleUploadSuccess = filename => {\r\n        this.setState({\r\n            image: filename,            \r\n        })\r\n        firebase.storage().ref('projectIMG').child(filename).getDownloadURL()\r\n            .then(url => this.setState({\r\n                imageURL: url\r\n            }))\r\n    }\r\n\r\n\r\n  render() {\r\n\r\n    // Destructuring to get 'auth' from mapStateToProps\r\n    const { auth } = this.props;\r\n\r\n    // If user is not loged in redirect to 'signin' page and if it is return code bellow\r\n    if (!auth.uid) return <Redirect to='/signin'/>\r\n\r\n    return (\r\n\r\n      <div className=\"container\">\r\n\r\n        <form onSubmit={this.handleSumbit} className=\"create-form\">\r\n            <h5 className=\"grey-text text-darken-3\">Create New Project</h5>\r\n            <br/> \r\n\r\n            {/* Importing image into project */}\r\n            <div className=\"image-container\">    \r\n                {this.state.image && <img className=\"image-props\" src={this.state.imageURL}/>}\r\n                <br/>\r\n                <FileUploader\r\n                    accept=\"image/*\"\r\n                    name='image'\r\n                    storageRef={firebase.storage().ref('projectIMG')}                    \r\n                    onUploadSuccess={this.handleUploadSuccess}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"title\">Project Title</label>\r\n                <input type=\"text\" id=\"title\" onChange={this.handleChange}/>\r\n            </div>\r\n\r\n            <div className=\"input-field\">\r\n                <label htmlFor=\"content\">Project Content</label>\r\n                <textarea id=\"content\" className=\"materialize-textarea\" onChange={this.handleChange}></textarea>\r\n            </div>\r\n\r\n            <div className=\"input-field\">\r\n                <button className=\"btn red lighten-1 z-depth-0\">Create</button>\r\n            </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {    \r\n    return {        \r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n// function that take data from rootReducer and projectReducer\r\n// auth: state.firebase.auth - takes data from auth reducers\r\n\r\n\r\n// This function will be called when we use dispatch\r\n// It will cretae new project, make asinc call and carry on with dispatch as regular\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        createProject: (project) => dispatch(createProject(project))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (CreateProject)\r\n// calling connect inside this component\r\n","export const createProject = (project) => {\r\n    return (dispatch, getState, {getFirestore}) => {\r\n        // make async call to database (will do that later)\r\n\r\n        // Gets connection to firestore database\r\n        const firestore = getFirestore();\r\n\r\n        // Gets connection to firebase profile info\r\n        const profile = getState().firebase.profile;\r\n\r\n        // Geting author id from firebase\r\n        const authorId = getState().firebase.auth.uid;\r\n        \r\n        // Connects to database collection and add new data to it\r\n        firestore.collection('projects').add({\r\n            ...project,\r\n            authorFirstName: profile.firstName,\r\n            authorLastName: profile.lastName,\r\n            authorId: authorId,\r\n            createdAt: new Date()\r\n        }).then(() => {\r\n            // After call to database we use dispatch method to create project\r\n            dispatch({type:'CREATE_PROJECT', project});\r\n        }).catch((err) => {\r\n            // If some error occurs\r\n            dispatch({type:'CREATE_PROJECT_ERROR', err});\r\n        })\r\n        \r\n    }\r\n};","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Navbar from './components/layout/Navbar'\nimport Dashboard from './components/dashboard/Dashboard';\nimport ProjectDetails from './components/projects/ProjectDetails'\nimport SignIn from './components/auth/SignIn'\nimport SignUp from './components/auth/SignUp'\nimport CreateProject from './components/projects/CreateProject'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n\n          <Switch> \n            <Route exact path='/' component={Dashboard} />\n            <Route path='/project/:id' component={ProjectDetails} />\n            <Route path='/signin' component={SignIn} />\n            <Route path='/signup' component={SignUp} />\n            <Route path='/create' component={CreateProject} />\n\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initState, action) => {\r\n\r\n    // Inspecting of what type is action in 'authActions.js' component 'dispatch' method\r\n    switch(action.type) {\r\n\r\n        // If there is error while loging return state and authError\r\n        case 'LOGIN_ERROR' :\r\n            console.log('login error'); \r\n            return {\r\n                ...state,\r\n                authError: 'Login failed'\r\n            }\r\n        \r\n        // If there is no error while loging return state and authError will be null\r\n        case 'LOGIN_SUCCES' :\r\n            console.log('login succes');\r\n            return {\r\n                ...state,\r\n                authError: null\r\n            }\r\n        \r\n        // Case when user successfuly signs out from app\r\n        case 'SIGNOUT_SUCCES' :\r\n            console.log('signout success');\r\n            return state;\r\n        \r\n        // Case when user successfuly signs up to app\r\n        case 'SIGNUP_SUCCESS' :\r\n            console.log('signup succes');\r\n            return {\r\n                ...state,\r\n                authError:null\r\n            }\r\n        \r\n        case 'SIGNUP_ERROR' :\r\n            console.log('signup error');\r\n            return {\r\n                ...state,\r\n                authError: action.err.message\r\n            }\r\n\r\n        // If none of those occurs return only state\r\n        default: \r\n            return state;\r\n    }\r\n   \r\n}\r\n\r\nexport default authReducer","// This is initial state for projects\r\nconst initState = {\r\n    projects: [\r\n    {id: '1', title: 'project 1', content: 'blah bla bla blah'},\r\n    {id: '2', title: 'project 2', content: 'blah bla bla blah'},\r\n    {id: '3', title: 'project 3', content: 'blah bla bla blah'}\r\n    ]\r\n}\r\n\r\n// This reducer returns initial state from above\r\nconst projectReducer = (state = initState, action) => {\r\n    \r\n    // Inspecting of what type is action in 'projectActions.js' component 'dispatch' method\r\n    switch (action.type) {\r\n        case 'CREATE_PROJECT':\r\n            console.log('project created', action.project)\r\n            // If it's of type as bellow we console log that content\r\n            return state;\r\n\r\n        case 'CREATE_PROJECT_ERROR':\r\n            console.log('create project error', action.err);\r\n            // If error occur we console log that\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }    \r\n}\r\n\r\nexport default projectReducer","import authReducer from './authReducer'\r\nimport projectReducer from './projectReducer'\r\n// This allows combining more reducers into one root reducer:\r\nimport { combineReducers } from 'redux'\r\n// Makes sinc data with database and our state:\r\nimport { firestoreReducer } from 'redux-firestore';\r\n// Allows connecting auth from firebase to this APP (sign in/out - login/out):\r\nimport { firebaseReducer } from 'react-redux-firebase'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    project: projectReducer,\r\n    firestore: firestoreReducer,\r\n    firebase: firebaseReducer\r\n});\r\n// This is how root reducer is created, combine reducers function is called and imports other reducers\r\n// It returns data stored in other partial reducers snd also funcionality from firebase and firestore\r\n\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './store/reducers/rootReducer'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport fbConfig from './config/fbConfig'\n\n// Created Redux store and added root reducer into store\nconst store = createStore(rootReducer, \n    \n    // compose is element that add some extra features to redux store\n    // In this case it's connecting app to firebase and firestore\n    compose(    \n    applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n    reduxFirestore(fbConfig),\n    reactReduxFirebase(fbConfig, {useFirestoreForProfile: true, userProfile: 'users', attachAuthIsReady: true})\n    // We add those properties to use data from firebase to our App as a user data\n    // userProfile: 'users' - define where user data is stored on database\n    )\n);\n// applyMiddleware(thunk) are implemented as a second parameter of Redux store\n// withExtraArgument({getFirebase, getFirestore}) - adds firebase and firestore to app\n\n\n// This will make app behave better (after figuring that user is loged it will show link only for loged users and in reverce)\nstore.firebaseAuthIsReady.then( () => {\n    // Wrapping up React app into Provider that allows using of Redux\n    ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}